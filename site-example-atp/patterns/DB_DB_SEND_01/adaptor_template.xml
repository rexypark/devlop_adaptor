<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<context:annotation-config />

	<!-- 
	
	onSignalPatternMap  
	
	bean.xml에 지정한 것을 반복하는 부분
	OnSignalList에 실행 시킬 클래스를 등록 할 수 있다.
	
	class 1 : TxidSendPollingData
	   - SQL 데이터와, 조회 건수를 세팅
	class 2 : TxidSendDataUpdate
	   - Polling 한 데이터를 처리중으로 update (state : 'P')
	   
	   
	class 3 : TxidSendDataToJMS
	   - 조회한 데이터를 큐로 전송
	
	-->
	
	<util:map id="onSignalPatternMap" map-class="java.util.LinkedHashMap">
		<entry key="DBSND">
			<util:list id="OnSignalList">
			
				<bean class="com.indigo.esb.std.db.snd.TxidSendPollingData" />
				<bean class="com.indigo.esb.std.db.snd.TxidSendDataUpdate" />
				<bean class="com.indigo.esb.std.com.snd.EncryptionProcess">
					<property name="cryptoType" value="SEED128" />
				</bean>
				<bean class="com.indigo.esb.std.db.snd.TxidSendDataToJMS" />
			</util:list>
		</entry>
	</util:map>

	<util:map id="onMessagePatternMap" map-class="java.util.LinkedHashMap">
		<entry key="DBRST">
			<util:list id="onMessageList">
				<bean class="com.indigo.esb.std.db.snd.TxidReceiveResultProcess" /> 
				<!-- 
					- 송신한 결과를 처리합니다 ( 성공 : 'S' , 실패 : 'F' )
					
					- 수신 어뎁터에서 연계처리 결과 ,txid,처리시간,결과 메시지를
 					  Message Header에서 얻습니다
 					  
 					- QL_${INTERFACEID}.xml 에 있는 ${INTERFACEID}.SOURCE_RESULT_UPDATE 쿼리를 
					    실행하여 결과를 처리					
				 -->
			</util:list>
		</entry>
	</util:map>
	
	<!-- db 설정 start -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="dbcpNativeJdbcExtractor"	class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" />
	
	<bean id="oracleLobhandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"		lazy-init="true">
		<property name="nativeJdbcExtractor">
			<ref local="dbcpNativeJdbcExtractor" />
		</property>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="SDB" />
	</bean>
	<!-- db 설정 end -->
	
	<aop:config>
		<aop:advisor
			pointcut="execution(* com.indigo.esb.adaptor.strategy.OnSignalStrategy.onStart(..))"
			advice-ref="txAdvice" />
	
		<aop:advisor
			pointcut="execution(* com.indigo.esb.adaptor.strategy.OnMessageStrategy.process(..))"
			advice-ref="txAdvice" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<import resource="adaptor_configure.xml" />
	
</beans>